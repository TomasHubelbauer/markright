name: ci_cd
on:
  push:
    branches:
    - master
jobs:
  main:
    runs-on: windows-latest
    steps:
      - name: Check out the source code
        uses: actions/checkout@v2
      - name: Switch to Node 14 (needed for PKG)
        uses: actions/setup-node@v2-beta
        with:
          node-version: '14'
      - name: Run tests, build binaries and bump version
        run: |
          Set-PSDebug -Trace 1
          $ErrorActionPreference = "Stop"

          # Initialize the dependencies in Git submodules
          git submodule update --recursive --init
          if (-not $?) {
            throw "Failed to run git submodule update"
          }

          # Run the JavaScript and MarkDown tests
          node test
          if (-not $?) {
            throw "Failed to run node test"
          }

          # Transpile the ESM source code to CJS for PKG
          npx tomashubelbauer/esm2cjs
          if (-not $?) {
            throw "Failed to run esm2cjs"
          }

          # Build the binaries based on the CJS source code needed by PKG
          npx pkg . --debug
          if (-not $?) {
            throw "Failed to run pkg"
          }

          # Reset changes made to the source code in the working tree by ESM2CJS
          # Note that the binaries will not be reverted as they are Git-ignored
          git checkout .
          if (-not $?) {
            throw "Failed to run git checkout"
          }

          # Reset any changes made in the submodules
          # TODO: Pass `node-wsb` as a parameter to `--ignore` of esm2cjs instead
          git submodule foreach --recursive git reset --hard

          # Bump the version in package.json
          # Note that the GitHub Release GitHub Action will add a tag not NPM
          npm --no-git-tag-version version patch
          if (-not $?) {
            throw "Failed to run npm version"
          }

          # Stage the updated package.json to commit and push after the release
          git add package.json package-lock.json
          if (-not $?) {
            throw "Failed to run git add"
          }
      - name: Query the updated version for the release tag and title
        run: echo "::set-output name=version::$(jq -r '.version' package.json)"
        id: version
      - name: Cut the new ${{steps.version.outputs.version}} release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{steps.version.outputs.version}}
          release_name: ${{steps.version.outputs.version}}
          draft: false
          prerelease: false
      - name: Upload the Linux binary release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: markright-linux
          asset_name: markright-linux
          asset_content_type: application/octet-stream
      - name: Upload the macOS binary release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: markright-macos
          asset_name: markright-macos
          asset_content_type: application/octet-stream
      - name: Upload the Windows binary release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: markright-win.exe
          asset_name: markright-win.exe
          asset_content_type: application/octet-stream
      - name: Commit & push package.json with the ${{steps.version.outputs.version}} version number
        run: |
          Set-PSDebug -Trace 1
          $ErrorActionPreference = "Stop"

          git config --global user.email "tomas@hubelbauer.net"
          git config --global user.name "Tomas Hubelbauer"
          
          git commit -m "Bump release to version to ${{steps.version.outputs.version}}"
          if (-not $?) {
            throw "Failed to run git commit"
          }
          
          git pull --rebase
          if (-not $?) {
            throw "Failed to run git pull"
          }
          
          git push
          if (-not $?) {
            throw "Failed to run git push"
          }
